{"version":3,"sources":["Components/sortingAlgorithms.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","quickSorter","quickSort","left","right","index","pivot","partition","App","useState","setArray","InitializeArray","x","splice","ceil","random","arrayBars","document","getElementsByClassName","style","backgroundColor","getClearAnimation","cnt","setTimeout","console","log","doingAnimation","flag","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","height","newHeight1","newHeight2","useEffect","bubbleSorter","bubbleSort","InsertionSorter","key","InsertionSort","className","map","ele","idx","onClick","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c5166107.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    animations.push([i, i]);\r\n\r\n    animations.push([i, i]);\r\n\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([j, j]);\r\n\r\n    animations.push([j, j]);\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\n\r\nexport function bubbleSort(array) {\r\n  const animations = [];\r\n\r\n  // now comes the part of dealing with the animations\r\n\r\n  console.log(array)\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = 0 ; j < array.length  ; j++) {\r\n      if (array[i] < array[j]) {\r\n\r\n\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        animations.push( [i,j , array[j] , array[i] ] ) ;\r\n\r\n\r\n\r\n        [array[j], array[i]] = [array[i], array[j]];\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  // after sorting the array\r\n\r\n  console.log(array) ;\r\n\r\n   return animations ;\r\n}\r\n\r\nexport function InsertionSort(array) {\r\n  // speedy recap of how insertion sort works\r\n\r\n  const animations = [] ;\r\n\r\n  console.log(array) ;\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    let j = i - 1;\r\n    let key = array[i];\r\n\r\n    while (j >= 0 && array[j] > key) {\r\n      [array[j + 1], array[j]] = [array[j], array[j + 1]];\r\n\r\n      animations.push( [j,j+1] ) ;\r\n      animations.push( [j,j+1] ) ;\r\n      animations.push( [j,j+1 , array[j] , array[j+1] ] ) ;\r\n      j--;\r\n      // after swapping the values\r\n    }\r\n\r\n    array[j + 1] = key;\r\n    \r\n\r\n    // now iterating over the whole array\r\n  }\r\n\r\n    console.log( array , ' are the animations ' )\r\n\r\n    return animations ;\r\n}\r\n\r\nexport function quickSorter(array) {\r\n  // This is the function of quickSort\r\n\r\n  const animations = [] ;\r\n\r\n  quickSort(array, 0, array.length - 1);\r\n\r\n  function partition(array, left, right) {\r\n    let pivot, i, j;\r\n\r\n    pivot = array[Math.floor((left + right) / 2)];\r\n    i = left;\r\n    j = right;\r\n\r\n    while (i <= j) {\r\n      while (array[i] < pivot) {\r\n        i++;\r\n      }\r\n\r\n      while (array[j] > pivot) {\r\n        j--;\r\n      }\r\n\r\n      if (i <= j) {\r\n        // cool new trick to swap the elements\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n\r\n        animations.push( [i , j] ) ;\r\n        animations.push( [i , j] ) ;\r\n        animations.push( [i,j , array[i] , array[j] ] ) ;\r\n\r\n        i++;\r\n        j--;\r\n      }\r\n    }\r\n\r\n    return i;\r\n  }\r\n\r\n  function quickSort(array, left, right) {\r\n    let index;\r\n\r\n    if (array.length > 1) {\r\n      index = partition(array, left, right);\r\n\r\n      if (left < index - 1) {\r\n        quickSort(array, left, index - 1);\r\n      }\r\n\r\n      if (index < right) {\r\n        quickSort(array, index, right);\r\n      }\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  return animations ;\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport ArraySize from './Components/ArraySize';\nimport { getMergeSortAnimations, bubbleSort , InsertionSort , quickSorter } from './Components/sortingAlgorithms';\n\nconst ANIMATION_SPEED = 10 ;\n\n\nfunction App() {\n  const [array, setArray] = useState([]);\n  const [size, setSize] = useState(null);\n\n  function InitializeArray(x) {\n    array.splice(0, array.length);\n\n    for (let i = 0; i < x; i++) {\n      array.push(Math.ceil(Math.random() * 690 + 10));\n    }\n\n    setArray([...array]);\n\n    const arrayBars = document.getElementsByClassName('array-bar') ;\n    \n\n    for( let i = 0 ; i< arrayBars.length ; i++ ){\n         \n\n           arrayBars[i].style.backgroundColor = 'pink' ;\n      \n\n    }\n\n  }\n\n  useEffect(() => {\n    let x = 130;\n\n    InitializeArray(x);\n  }, []);\n\n  function getClearAnimation(array , cnt ) {\n  \n\n    let BarStyle = null;\n\n\n\n    for (let i = 0; i < array.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n\n      setTimeout( () => {\n\n        console.log('this is the set timeout thing') ;\n        BarStyle = arrayBars[i] ;\n        BarStyle.style.backgroundColor = 'purple';\n        BarStyle = arrayBars[i];\n\n      } , cnt + 10*i ) ;\n\n\n\n    }\n  }\n\n  function doingAnimation(animations ,flag ){\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    let cnt = 0 ;\n\n    for (let i = 0; i < animations.length; i++) {\n\n\n      const isColorChange = i % 3 !== 2;\n      \n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        const color = i % 3 === 0 ? 'turquoise' : 'pink';\n        cnt += ANIMATION_SPEED * i ;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n\n        }, ANIMATION_SPEED * i);\n      } else {\n\n        if( flag === 1 ){\n       \n\n\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n            cnt += ANIMATION_SPEED * i ;\n\n            if( i === array.length - 1 ){\n\n              getClearAnimation(array , cnt) ;\n\n            }\n\n          }, ANIMATION_SPEED * i);\n\n        }else {\n\n\n\n          console.log( ' inside the other three algorithms adflsjkldasfjljadsfl' )\n          setTimeout(() => {\n            cnt += ANIMATION_SPEED * i ;\n            const [barOneIdx, barTwoIdx , newHeight1 , newHeight2] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            barOneStyle.height = `${newHeight1}px`;\n            barTwoStyle.height = `${newHeight2}px`;\n\n            if( i === array.length - 1 ){\n\n              getClearAnimation(array , cnt) ;\n\n            }\n\n\n          }, ANIMATION_SPEED * i);\n\n\n\n        }\n\n\n      }\n\n      \n\n    }\n\n    console.log( 'time taken in milliseconds is' ,cnt  )\n    \n     getClearAnimation(array, cnt/400 );\n\n  }\n\n  function doMergeSort() {\n    console.log('please do the merge sort animations');\n\n  \n\n    const animations = getMergeSortAnimations(array);\n    const flag = 1 ;\n\n    doingAnimation(animations , flag ) ;\n  \n\n\n  }\n\n   const bubbleSorter = () => {\n\n    console.log('bubble sort called') ;\n\n     const animations = bubbleSort(array) ;\n\n     const flag = 0 ;\n\n     doingAnimation(animations , flag ) ;\n\n\n   }\n\n   const InsertionSorter = () =>{\n\n    const animations = InsertionSort(array) ;\n    const flag = 0 ;  \n    doingAnimation(animations , flag ) ;\n\n\n   }\n\n   function quickSorterHelper(){\n\n    const animations = quickSorter(array) ;\n    doingAnimation(animations) ;\n    console.log('this project was pretty long') ;\n\n   }\n\n  return (\n    <div className=\"App\">\n      <div className=\"array-container rotate\">\n        {array.map((ele, idx) => (\n          <div key={idx} className=\"array-bar\" style={{ height: ele }}>\n            {' '}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"button-holder\">\n        <button className = \"genrateNewArray btn\"  onClick={() => InitializeArray(130)}>Genrate New Array</button>\n        <button className = \"mergeSort btn\" onClick={() => doMergeSort()}>Merge Sort</button>\n        <button className = \"\" onClick = { () => bubbleSorter() } className = \"bubble-sort btn\" >Bubble sort</button>\n        <button className = \"\" onClick = { () => quickSorterHelper() } className = \"Quick-sort btn\">Quick Sort</button>\n        <button className = \"\" onClick = { () => InsertionSorter(array)  } className = \"Insertion-sort btn\">Insertion Sort</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}